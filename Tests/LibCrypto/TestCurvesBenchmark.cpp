/*
 * Copyright (c) 2023, Michiel Visser <opensource@webmichiel.nl>
 *
 * SPDX-License-Identifier: BSD-2-Clause
 */

#include <AK/ByteBuffer.h>
#include <AK/StdLibExtras.h>
#include <LibCrypto/Curves/SECPxxxr1.h>
#include <LibCrypto/Curves/X25519.h>
#include <LibCrypto/Curves/X448.h>
#include <LibTest/TestCase.h>

TEST_CASE(benchmark_secp256r1_generate_public_key)
{
    Crypto::Curves::SECP256r1 curve;
    auto bytes = MUST(ByteBuffer::create_zeroed(32));
    for (size_t i = 1; i <= 10000; i++) {
        bytes[0] = i & 0xff;
        bytes[1] = (i >> 8) & 0xff;
        auto result = MUST(curve.generate_public_key(bytes));
        AK::taint_for_optimizer(result);
    }
}

TEST_CASE(benchmark_secp256r1_verify)
{
    Crypto::Curves::SECP256r1 curve;
    // clang-format off
    Array<u8, 32> hash = {
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    Array<u8, 65> pubkey = {
        0x04,
        0x6B, 0x17, 0xD1, 0xF2, 0xE1, 0x2C, 0x42, 0x47, 0xF8, 0xBC, 0xE6, 0xE5, 0x63, 0xA4, 0x40, 0xF2,
        0x77, 0x03, 0x7D, 0x81, 0x2D, 0xEB, 0x33, 0xA0, 0xF4, 0xA1, 0x39, 0x45, 0xD8, 0x98, 0xC2, 0x96,
        0x4F, 0xE3, 0x42, 0xE2, 0xFE, 0x1A, 0x7F, 0x9B, 0x8E, 0xE7, 0xEB, 0x4A, 0x7C, 0x0F, 0x9E, 0x16,
        0x2B, 0xCE, 0x33, 0x57, 0x6B, 0x31, 0x5E, 0xCE, 0xCB, 0xB6, 0x40, 0x68, 0x37, 0xBF, 0x51, 0xF5,
    };
    Array<u8, 71> signature = {
        0x30, 0x45, 0x02, 0x21, 0x00, 0xF1, 0x04, 0x30, 0x2E, 0xAB, 0xB4, 0x28, 0xEC, 0xC8, 0xE7, 0x1C,
        0xE2, 0xE3, 0x8F, 0x6C, 0xBE, 0xD8, 0x48, 0xA8, 0xE9, 0xA2, 0xB5, 0xD5, 0xDA, 0x19, 0x93, 0x3E,
        0x48, 0x5C, 0x83, 0xCC, 0x71, 0x02, 0x20, 0x0C, 0xBB, 0x40, 0xA0, 0xB7, 0xB9, 0xB2, 0xE0, 0x48,
        0x92, 0x06, 0x22, 0xFB, 0x28, 0x6F, 0xD1, 0x46, 0x95, 0xF2, 0x4C, 0xF6, 0x50, 0xBD, 0xAA, 0x40,
        0xB8, 0x85, 0xF8, 0x4C, 0x34, 0xBB, 0xB9,
    };
    // clang-format on

    for (size_t i = 1; i <= 10000; i++) {
        hash[0] = i & 0xff;
        hash[1] = (i >> 8) & 0xff;
        auto result = MUST(curve.verify(hash, pubkey, signature));
        AK::taint_for_optimizer(result);
    }
}
